#!/bin/bash

# Bah command line tools for checking CSV formated output of envtesting
# @author Ondrej Procházka, Dušan Hokův, Roman Ožana
# Supports: Mac, Ubuntu, Debian 
printf "\033c" # cls

##################################################################################################################

echo $@ > /tmp/arg
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if ! ( [[ "$4" =~ ^[0-9]{1,4}:[0-9]{1,4}$ ]] && [[ "$5" =~ ^[0-9]{1,4}:[0-9]{1,4}$ ]]) ; then
	echo "Usage: check_wikidi_apptest <ip/domain> <http HOST> <url_to_test> MINOK_WARN:MAXFAIL_WARN MINOK_CRIT:MAXFAIL_CRIT"
	echo "${1} ${2} ${3} ${4} ${5}"
	echo "example: ./check server.com server.com /envtesting/csv 1:7 1:10"
	exit 3
fi

##################################################################################################################
# prepare input variables
##################################################################################################################

URL="http://${1}${3}"               # concat url request
HOSTHEAD="--header=\"Host: ${2}\""  # host for WGET

# Mac don't know tempfile
if [[ $OSTYPE = darwin* ]]; then
	TMPFILE=$(mktemp -t="envtesting")
else
	TMPFILE=$(tempfile)
fi

##################################################################################################################

MINOK_WARN=$(echo $4 | cut -d: -f1)
MAXFAIL_WARN=$(echo $4 | cut -d: -f2)

MINOK_CRIT=$(echo $5 | cut -d: -f1)
MAXFAIL_CRIT=$(echo $5 | cut -d: -f2)

##################################################################################################################

if [[ $OSTYPE = darwin* ]]; then
	DOWNLOAD=$(curl -H="Host: ${2}" "$URL" -o "$TMPFILE" 2> /dev/null)
else
	DOWNLOAD=$(wget --header="Host: ${2}" "$URL" -O"$TMPFILE" 2> /dev/null)
fi

##################################################################################################################

if $DOWNLOAD; then

	# OK messages
	OK_COUNT=$(cat $TMPFILE | grep "^OK" | wc -l)

	# errors 
	ERROR_COUNT=$(cat $TMPFILE | grep -e "^ERROR" -e "^WARNING" -e "^CRIT"| wc -l) # count errors
	ERROR_MESSAGE=$(cat $TMPFILE | grep -e "^ERROR" -e "^WARNING" -e "^CRIT") # error messages

	rm $TMPFILE # delete TMP file

	# ERRORS
	if [ "$OK_COUNT" -lt "$MINOK_CRIT" ] || [ "$ERROR_COUNT" -ge "$MAXFAIL_CRIT" ] ; then
		# ERROR need to be replace with CRIT for out nagios check
		echo -e "APPTEST CRITICAL - $OK_COUNT tests passed, $ERROR_COUNT tests failed: \n${ERROR_MESSAGE//ERROR/CRIT}"
		exit 2
	fi
	# WARNING
	if [ "$OK_COUNT" -lt "$MINOK_WARN" ] || [ "$ERROR_COUNT" -ge "$MAXFAIL_WARN" ] ; then
		ERROR_MESSAGE = 
		echo -e "APPTEST WARNING - $OK_COUNT tests passed, $ERROR_COUNT tests failed: \n${ERROR_MESSAGE//ERROR/CRIT}"
		exit 1
	fi

	echo "APPTEST OK - $OK_COUNT tests passed, $ERROR_COUNT tests failed."
	exit 0
	
else
	echo "APPTEST CRITICAL - couldn't get requested URL $URL"
	exit 2
fi
